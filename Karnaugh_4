{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPqVFo0fdBwsxuvBSnlaug1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "6f839730c6ea4c23a12f54b44abb6dbe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "Expression:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_41354626b197426db893de5d769ef4d0",
            "placeholder": "Type the boolean expression here...",
            "rows": null,
            "style": "IPY_MODEL_4996ad9238bc4309b5d6f5168ea30d87",
            "value": " !A!B!C!D+!A!BC!D+A!B!C!D+A!BC!D+!A!B!C!D+!A!B!CD"
          }
        },
        "41354626b197426db893de5d769ef4d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "100px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "50%"
          }
        },
        "4996ad9238bc4309b5d6f5168ea30d87": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fd11511a715a4806b4d1f9906146cdb1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Generate Karnaugh Map",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_d6ccfb2a605d43f49d77a5b35510a484",
            "style": "IPY_MODEL_b3a5f1f438504f03a32c70dc92f72e0a",
            "tooltip": ""
          }
        },
        "d6ccfb2a605d43f49d77a5b35510a484": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3a5f1f438504f03a32c70dc92f72e0a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bbutka/CEC220/blob/main/Karnaugh_4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 952,
          "referenced_widgets": [
            "6f839730c6ea4c23a12f54b44abb6dbe",
            "41354626b197426db893de5d769ef4d0",
            "4996ad9238bc4309b5d6f5168ea30d87",
            "fd11511a715a4806b4d1f9906146cdb1",
            "d6ccfb2a605d43f49d77a5b35510a484",
            "b3a5f1f438504f03a32c70dc92f72e0a"
          ]
        },
        "id": "eUTyOCOchKpz",
        "outputId": "ed160f03-7258-4138-9971-0fca454aef4a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Textarea(value='', description='Expression:', layout=Layout(height='100px', width='50%'), placeholder='Type thâ€¦"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6f839730c6ea4c23a12f54b44abb6dbe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(description='Generate Karnaugh Map', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fd11511a715a4806b4d1f9906146cdb1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(A & C & ~B & ~D) | (A & ~B & ~C & ~D) | (C & ~A & ~B & ~D) | (D & ~A & ~B & ~C) | (~A & ~B & ~C & ~D)\n",
            "A | B | C | D | f\n",
            "-----------------\n",
            "0 | 0 | 0 | 0 | 1\n",
            "0 | 0 | 0 | 1 | 1\n",
            "0 | 0 | 1 | 0 | 1\n",
            "0 | 0 | 1 | 1 | 0\n",
            "0 | 1 | 0 | 0 | 0\n",
            "0 | 1 | 0 | 1 | 0\n",
            "0 | 1 | 1 | 0 | 0\n",
            "0 | 1 | 1 | 1 | 0\n",
            "1 | 0 | 0 | 0 | 1\n",
            "1 | 0 | 0 | 1 | 0\n",
            "1 | 0 | 1 | 0 | 1\n",
            "1 | 0 | 1 | 1 | 0\n",
            "1 | 1 | 0 | 0 | 0\n",
            "1 | 1 | 0 | 1 | 0\n",
            "1 | 1 | 1 | 0 | 0\n",
            "1 | 1 | 1 | 1 | 0\n",
            "\n",
            "Simplified expression for f: (!B & !D) + (!A & !B & !C)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import sympy as sp\n",
        "import re\n",
        "import itertools\n",
        "from itertools import product\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from matplotlib.colors import to_rgb, to_hex\n",
        "from IPython.display import display\n",
        "import ipywidgets as widgets\n",
        "\n",
        "# Original strong colors\n",
        "colors = ['#FF0000', '#0000FF', '#FFFF00', '#00FF00', '#FFA500', '#800080', '#FFFFFF']\n",
        "\n",
        "def lighten_color(color, amount=0.5):\n",
        "    \"\"\"Lightens the given color by mixing it with white.\"\"\"\n",
        "    white = np.array([1, 1, 1])\n",
        "    color = np.array(to_rgb(color))\n",
        "    return to_hex((1 - amount) * color + amount * white)\n",
        "\n",
        "# Lightened colors\n",
        "lightened_colors = [lighten_color(color, 0.4) for color in colors]\n",
        "\n",
        "def blend_colors(color1, color2):\n",
        "    \"\"\"Blends two colors together by averaging their RGB values.\"\"\"\n",
        "    rgb1 = to_rgb(color1)\n",
        "    rgb2 = to_rgb(color2)\n",
        "    blended_rgb = [(c1 + c2) / 2 for c1, c2 in zip(rgb1, rgb2)]\n",
        "    return to_hex(blended_rgb)\n",
        "\n",
        "def parse_logic_expression(expression):\n",
        "    # Ignore leading 'f=' if present\n",
        "    if expression.startswith('f='):\n",
        "        expression = expression[2:]\n",
        "\n",
        "    # Replace logical NOT '!' with SymPy '~'\n",
        "    expression = expression.replace('!', '~')\n",
        "    # Replace logical OR '+' with SymPy '|'\n",
        "    expression = expression.replace('+', '|')\n",
        "\n",
        "    # Insert explicit AND '&' where it is implied by juxtaposition\n",
        "    expression = re.sub(r'([A-Z])(?=[A-Z~])', r'\\1 & ', expression)\n",
        "    expression = re.sub(r'~\\s*&', '~', expression)  # Fix for NOT operator\n",
        "\n",
        "    # Parse the expression using SymPy\n",
        "    variables = sp.symbols('A B C D')\n",
        "    parsed_expression = sp.sympify(expression, locals={v.name: v for v in variables})\n",
        "    return parsed_expression, variables\n",
        "\n",
        "def print_truth_table(expr, variables):\n",
        "    # Generate all possible combinations of truth values for the variables\n",
        "    num_vars = len(variables)\n",
        "    combinations = list(product([0, 1], repeat=num_vars))\n",
        "\n",
        "    # Print the table header\n",
        "    header = \" | \".join([str(var) for var in variables]) + \" | f\"\n",
        "    print(header)\n",
        "    print(\"-\" * len(header))\n",
        "\n",
        "    truth_table = []\n",
        "\n",
        "    # Print each row of the truth table\n",
        "    for combination in combinations:\n",
        "        values = {var: val for var, val in zip(variables, combination)}\n",
        "        result = expr.subs(values)\n",
        "        row = list(combination) + [int(bool(result))]\n",
        "        truth_table.append(row)\n",
        "        print(\" | \".join([str(val) for val in row]))\n",
        "\n",
        "    return truth_table\n",
        "\n",
        "def simplify_expression(expr):\n",
        "    simplified_expr = sp.simplify_logic(expr, form='dnf')\n",
        "    return simplified_expr\n",
        "\n",
        "def convert_to_original_format(expr):\n",
        "    expr_str = str(expr)\n",
        "    expr_str = expr_str.replace('~', '!')\n",
        "    expr_str = expr_str.replace('|', '+')\n",
        "    return expr_str\n",
        "\n",
        "def extract_minterms(simplified_expr, variables):\n",
        "    terms = simplified_expr.args if simplified_expr.func == sp.Or else [simplified_expr]\n",
        "    minterms = []\n",
        "    for term in terms:\n",
        "        minterm = []\n",
        "        if term.func == sp.And:\n",
        "            for arg in term.args:\n",
        "                if arg.func == sp.Not:\n",
        "                    minterm.append((arg.args[0], 0))\n",
        "                else:\n",
        "                    minterm.append((arg, 1))\n",
        "        else:\n",
        "            if term.func == sp.Not:\n",
        "                minterm.append((term.args[0], 0))\n",
        "            else:\n",
        "                minterm.append((term, 1))\n",
        "        minterms.append(minterm)\n",
        "    return minterms\n",
        "\n",
        "def draw_karnaugh_map(truth_table, simplified_expr, variables):\n",
        "    kmap = {}\n",
        "    for row in truth_table:\n",
        "        A, B, C, D, result = row\n",
        "        kmap[(A, B, C, D)] = result\n",
        "\n",
        "    # Define the Karnaugh map structure with A and B on columns and C, D on rows\n",
        "    columns = [(0, 0), (0, 1), (1, 1), (1, 0)]\n",
        "    rows = [(0, 0), (0, 1), (1, 1), (1, 0)]\n",
        "\n",
        "    # Rearrange rows to match the specified minterms order\n",
        "    row_order = [0, 1, 2, 3]\n",
        "\n",
        "    # Initialize the Karnaugh map\n",
        "    kmap_layout = np.full((4, 4), '', dtype=object)\n",
        "\n",
        "    # Fill the Karnaugh map with values from the truth table\n",
        "    for (A, B, C, D), result in kmap.items():\n",
        "        col_index = columns.index((A, B))\n",
        "        row_index = row_order[rows.index((C, D))]\n",
        "        kmap_layout[row_index, col_index] = str(result)\n",
        "\n",
        "    # Highlight the minterms in the Karnaugh map\n",
        "    color_map = np.full((4, 4), 'white', dtype=object)\n",
        "\n",
        "    terms = simplified_expr.args if simplified_expr.func == sp.Or else [simplified_expr]\n",
        "    color_index = 0\n",
        "    for term in terms:\n",
        "        color = lightened_colors[color_index % len(lightened_colors)]\n",
        "        minterms = []\n",
        "        if term.func == sp.And:\n",
        "            minterms = [term]\n",
        "        else:\n",
        "            minterms = term.args if term.func == sp.Or else [term]\n",
        "\n",
        "        for minterm in minterms:\n",
        "            vars_values = {v: -1 for v in variables}\n",
        "            for arg in minterm.args if minterm.func == sp.And else [minterm]:\n",
        "                if arg.func == sp.Not:\n",
        "                    vars_values[arg.args[0]] = 0\n",
        "                else:\n",
        "                    vars_values[arg] = 1\n",
        "\n",
        "            for row in truth_table:\n",
        "                A, B, C, D, result = row\n",
        "                match = all((vars_values[variables[i]] == val or vars_values[variables[i]] == -1) for i, val in enumerate([A, B, C, D]))\n",
        "                if match:\n",
        "                    col_index = columns.index((A, B))\n",
        "                    row_index = row_order[rows.index((C, D))]\n",
        "                    current_color = color_map[row_index, col_index]\n",
        "                    if current_color == 'white':\n",
        "                        color_map[row_index, col_index] = color\n",
        "                    else:\n",
        "                        color_map[row_index, col_index] = blend_colors(current_color, color)\n",
        "\n",
        "        color_index += 1\n",
        "\n",
        "    # Create the Karnaugh map plot\n",
        "    fig, ax = plt.subplots(figsize=(6, 4))  # Adjust the figure size to reduce white space\n",
        "    plt.subplots_adjust(top=1, bottom=0, left=0, right=1, hspace=0, wspace=0)  # Adjust layout parameters\n",
        "\n",
        "    # Create an empty layout for the table with 5 rows and 6 columns\n",
        "    table_data = np.full((5, 6), '', dtype=object)\n",
        "    cell_colors = np.full((5, 6), 'white', dtype=object)\n",
        "\n",
        "    # Place the variable names and labels\n",
        "    table_data[0, 0] = 'AB/CD'\n",
        "    table_data[0, 1] = ''\n",
        "    table_data[0, 2] = '00'\n",
        "    table_data[0, 3] = '01'\n",
        "    table_data[0, 4] = '11'\n",
        "    table_data[0, 5] = '10'\n",
        "    table_data[1, 0] = '00'\n",
        "    table_data[2, 0] = '01'\n",
        "    table_data[3, 0] = '11'\n",
        "    table_data[4, 0] = '10'\n",
        "\n",
        "    # Fill the Karnaugh map values in the table\n",
        "    for i in range(4):\n",
        "        for j in range(4):\n",
        "            table_data[i + 1, j + 2] = kmap_layout[i, j]\n",
        "            cell_colors[i + 1, j + 2] = color_map[i, j]\n",
        "\n",
        "    # Draw the table\n",
        "    table = ax.table(cellText=table_data, cellColours=cell_colors, cellLoc='center', loc='center', edges='closed')\n",
        "\n",
        "    # Format the table\n",
        "    table.auto_set_font_size(False)\n",
        "    table.set_fontsize(12)\n",
        "    table.scale(1.2, 1.2)\n",
        "\n",
        "    # Center the variable names in their respective cells\n",
        "    for key, cell in table.get_celld().items():\n",
        "        if key == (0, 0):\n",
        "            cell.set_text_props(ha='center', va='center')\n",
        "        elif key in [(1, 0), (2, 0), (3, 0), (4, 0)]:\n",
        "            cell.set_text_props(ha='center', va='center', rotation=0)\n",
        "\n",
        "    # Remove the axis\n",
        "    ax.axis('off')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "# Example usage\n",
        "text_input = widgets.Textarea(\n",
        "    value='',\n",
        "    placeholder='Type the boolean expression here...',\n",
        "    description='Expression:',\n",
        "    layout=widgets.Layout(width='50%', height='100px'),\n",
        "    disabled=False\n",
        ")\n",
        "display(text_input)\n",
        "\n",
        "def on_button_click(b):\n",
        "    expression = text_input.value\n",
        "    parsed_expression, variables = parse_logic_expression(expression)\n",
        "    print(parsed_expression)\n",
        "    truth_table = print_truth_table(parsed_expression, variables)\n",
        "    simplified_expr = simplify_expression(parsed_expression)\n",
        "    original_format_expr = convert_to_original_format(simplified_expr)\n",
        "    print(f\"\\nSimplified expression for f: {original_format_expr}\")\n",
        "    draw_karnaugh_map(truth_table, simplified_expr, variables)\n",
        "\n",
        "button = widgets.Button(description=\"Generate Karnaugh Map\")\n",
        "button.on_click(on_button_click)\n",
        "display(button)\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}